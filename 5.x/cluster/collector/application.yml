# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cluster:
  zookeeper:
    hostPort: {ZK_ADDRESSES}
    sessionTimeout: 100000
naming:
  jetty:
    #OS real network IP(binding required), for agent to find collector cluster
    host: {NAMING_BIND_HOST}
    port: {NAMING_BIND_PORT}
    contextPath: /
cache:
  #  guava:
  caffeine:
remote:
  gRPC:
    # OS real network IP(binding required), for collector nodes communicate with each other in cluster. collectorN --(gRPC) --> collectorM
    host: {BIND_HOST}
    port: {REMOTE_BIND_PORT}
agent_gRPC:
  gRPC:
    #OS real network IP(binding required), for agent to uplink data(trace/metrics) to collector. agent--(gRPC)--> collector
    host: {BIND_HOST}
    port: {AGENT_GRPC_BIND_PORT}
    # Set these two setting to open ssl
    #sslCertChainFile: $path
    #sslPrivateKeyFile: $path

    # Set your own token to active auth
    #authentication: xxxxxx
agent_jetty:
  jetty:
    # OS real network IP(binding required), for agent to uplink data(trace/metrics) to collector through HTTP. agent--(HTTP)--> collector
    # SkyWalking native Java/.Net/node.js agents don't use this.
    # Open this for other implementor.
    host: {AGENT_JETTY_BIND_HOST}
    port: {AGENT_JETTY_BIND_PORT}
    contextPath: /
analysis_register:
  default:
analysis_jvm:
  default:
analysis_segment_parser:
  default:
    bufferFilePath: {BUFFER_FILE_PATH}
    bufferOffsetMaxFileSize: {BUFFER_OFFSET_MAX_FILE_SIZE}
    bufferSegmentMaxFileSize: {BUFFER_SEGMENT_MAX_FILE_SIZE}
    bufferFileCleanWhenRestart: {BUFFER_FILE_CLEAN_WHEN_RESTART}
ui:
  jetty:
    # Stay in `0.0.0.0` if UI starts up in default mode.
    # Change it to OS real network IP(binding required), if deploy collector in different machine.
    host: {UI_JETTY_BIND_HOST}
    port: {UI_JETTY_BIND_PORT}
    contextPath: /
storage:
  elasticsearch:
    clusterName: {ES_CLUSTER_NAME}
    clusterTransportSniffer: false
    clusterNodes: {ES_ADDRESSES}
    indexShardsNumber: {ES_SHARDS_NUMBER}
    indexReplicasNumber: {ES_REPLICAS_NUMBER}
    highPerformanceMode: {ES_HIGH_PERFORMANCE_MODE}
    # Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html
    bulkActions: {ES_BULK_ACTIONS} # Execute the bulk every 2000 requests
    bulkSize: {ES_BULK_SIZE} # flush the bulk every 20mb
    flushInterval: {ES_FLUSH_INTERVAL} # flush the bulk every 10 seconds whatever the number of requests
    concurrentRequests: {ES_CONCURRENT_REQUESTS} # the number of concurrent requests
    # Set a timeout on metric data. After the timeout has expired, the metric data will automatically be deleted.
    traceDataTTL: {TRACE_DATA_TTL} # Unit is minute
    minuteMetricDataTTL: {MINUTE_METRIC_DATA_TTL} # Unit is minute
    hourMetricDataTTL: {HOUR_METRIC_DATA_TTL} # Unit is hour
    dayMetricDataTTL: {DAY_METRIC_DATA_TTL} # Unit is day
    monthMetricDataTTL: {MONTH_METRIC_DATA_TTL} # Unit is month
#storage:
#  h2:
#    url: jdbc:h2:~/memorydb
#    userName: sa
configuration:
  default:
    #namespace: xxxxx
    # alarm threshold
    applicationApdexThreshold: {THRESHOLD_APPLICATION_APDEX}
    serviceErrorRateThreshold: {THRESHOLD_SERVICE_ERROR_RATE}
    serviceAverageResponseTimeThreshold: {THRESHOLD_SERVICE_AVG_RESPONSE_TIME}
    instanceErrorRateThreshold: {THRESHOLD_INSTANCE_ERROR_RATE}
    instanceAverageResponseTimeThreshold: {THRESHOLD_INSTANCE_AVG_RESPONSE_TIME}
    applicationErrorRateThreshold: {THRESHOLD_APPLICATION_ERROR_RATE}
    applicationAverageResponseTimeThreshold: {THRESHOLD_APPLICATION_AVG_RESPONSE_TIME}
    # thermodynamic
    thermodynamicResponseTimeStep: {THERMODYNAMIC_RESPONSE_TIME}
    thermodynamicCountOfResponseTimeSteps: {THERMODYNAMIC_COUNT_OF_RESPONSE_TIME}
    # max collection's size of worker cache collection, setting it smaller when collector OutOfMemory crashed.
    workerCacheMaxSize: {WORKER_CACHE_MAX_SIZE}
#receiver_zipkin:
#  default:
#    host: 0.0.0.0
#    port: 9411
#    contextPath: /
